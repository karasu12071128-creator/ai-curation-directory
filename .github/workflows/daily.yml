name: daily-refresh

on:
  workflow_dispatch:  # 手動実行
  schedule:
    - cron: "0 0 * * *"  # 毎日UTC 0時（日本時間9時）

jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
  with:
    fetch-depth: 0           # 履歴を持った状態でチェックアウト
    persist-credentials: true # pushできる資格情報を保持（デフォルトtrueだけど明示でOK）

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install deps
        run: pip install requests

      - name: Fetch HF
        run: python scripts/fetch_hf.py > hf.json

      - name: Fetch GitHub
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: python scripts/fetch_github.py > gh.json
      - name: Debug repo tree
        run: |
          pwd
          git rev-parse --short HEAD
          ls -la
          echo "---- scripts ----"
          ls -la scripts || true
      - name: Merge & Rank
        run: python scripts/merge_and_rank.py hf.json gh.json > data/resources.json

      - name: Make daily diff
        run: python scripts/make_diff.py data/resources.json > data/diff.json

      - name: Export CSV for sale
        run: python scripts/export_csv.py data/resources.json > data/resources.csv

      - name: Publish artifacts to docs
        run: |
          mkdir -p docs
          cp data/resources.json docs/resources.json
          cp data/resources.csv docs/
          
       - name: Commit & push
      run: |
        # bot の署名
        git config --global user.name  "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

        # 念のためディレクトリを用意
        mkdir -p docs data

        # 変更ファイルをステージ（無くてもコケないように || true）
        git add docs/*.json docs/*.csv || true
        git add data/*.json           || true

        # 変更がある時だけコミット
        if git diff --cached --quiet; then
          echo "No changes to commit."
        else
          git commit -m "Auto update data"
          # 競合を避けるため軽くリベース付き pull（失敗しても続行）
          git pull --rebase origin "${GITHUB_REF_NAME:-main}" || true
          git push
        fi